# Generated by Django 2.1.7 on 2020-01-28 20:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djchoices.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='active')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels_admin', to=settings.AUTH_USER_MODEL, verbose_name='admin')),
                ('authors', models.ManyToManyField(null=True, related_name='channels_author', to=settings.AUTH_USER_MODEL, verbose_name='authors')),
                ('followed_by', models.ManyToManyField(null=True, related_name='followings_channel', to=settings.AUTH_USER_MODEL, verbose_name='followers')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='active')),
                ('text', models.TextField()),
                ('answering', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='socials.Comment')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='active')),
                ('feedback', models.CharField(blank=True, choices=[('MALE', 'MALE'), ('FEMALE', 'FEMALE')], max_length=32, validators=[djchoices.choices.ChoicesValidator({'FEMALE': 'FEMALE', 'MALE': 'MALE'})])),
                ('comment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='socials.Comment')),
                ('feedbacker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes_or_dislikes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('situation', models.CharField(choices=[('FOLLOWED', 'FOLLOWED'), ('COMMENT_ON_COMMENT', 'Comment on Comment'), ('LIKE_ON_COMMENT', 'Like on Comment'), ('LIKE_ON_POST', 'Like on Post'), ('COMMENT_ON_POST', 'Comment on Post')], max_length=32, validators=[djchoices.choices.ChoicesValidator({'COMMENT_ON_COMMENT': 'Comment on Comment', 'COMMENT_ON_POST': 'Comment on Post', 'FOLLOWED': 'FOLLOWED', 'LIKE_ON_COMMENT': 'Like on Comment', 'LIKE_ON_POST': 'Like on Post'})])),
                ('audience_id', models.UUIDField(verbose_name='audience id')),
                ('audience_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='audience type')),
                ('for_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='active')),
                ('title', models.CharField(max_length=100)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channels', to='socials.Channel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='like',
            name='post',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='socials.Post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='socials.Post'),
        ),
    ]
